// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\12\24"+
    "\1\0\1\25\1\26\1\27\1\30\2\0\1\31\2\32"+
    "\1\33\1\34\3\32\1\35\2\32\1\36\2\32\1\37"+
    "\1\40\1\32\1\41\1\42\1\43\1\32\1\44\4\32"+
    "\1\45\1\0\1\46\1\0\1\47\1\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\32\1\57\2\32"+
    "\1\60\1\32\1\61\1\62\1\63\1\32\1\64\1\65"+
    "\1\66\1\67\1\70\4\32\1\71\1\72\1\73\7\0"+
    "\1\3\73\0\1\32\7\0\1\32\3\0\1\32\3\0"+
    "\1\32\1\0\1\32\6\0\1\32\1\0\1\32\4\0"+
    "\1\32\7\0\1\32\3\0\1\32\3\0\1\32\1\0"+
    "\1\32\6\0\1\32\1\0\1\32\u012b\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\0\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\3\20\1\21\7\20\1\22\1\0"+
    "\1\23\1\24\1\25\1\26\1\0\1\27\1\0\1\1"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\6\20\1\36"+
    "\4\20\1\37\3\0\5\20\1\40\1\41\3\20\2\0"+
    "\1\1\4\20\1\42\2\20\1\43\1\0\2\20\1\44"+
    "\1\20\1\45\1\20\1\0\1\20\1\46\1\47\1\20"+
    "\1\50\1\0\1\20\1\51\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\105\0\1\52\4\0\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\74\0\u012c\0\74"+
    "\0\74\0\74\0\74\0\74\0\u0168\0\u01a4\0\u01e0\0\u021c"+
    "\0\74\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\74"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\74"+
    "\0\u0564\0\74\0\74\0\74\0\74\0\u05a0\0\u01a4\0\u05dc"+
    "\0\u0618\0\74\0\74\0\74\0\74\0\74\0\74\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u030c\0\u07bc\0\u07f8"+
    "\0\u0834\0\u0870\0\74\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c"+
    "\0\u09d8\0\u0a14\0\u0a50\0\u030c\0\u030c\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u08e8\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u030c"+
    "\0\u0ca8\0\u0ce4\0\u030c\0\u0d20\0\u0d5c\0\u0d98\0\u030c\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u030c\0\u030c\0\u0f00\0\u030c"+
    "\0\u0f3c\0\u0f78\0\u030c\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\74\0\u2580\0\u25bc\0\u25f8\0\u2634\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\2\1\3\1\4\1\5\1\0"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\25\1\26\6\25\1\27\2\25\1\0\1\30\3\25"+
    "\1\31\1\32\1\33\1\34\1\25\1\35\3\25\1\36"+
    "\4\25\1\37\1\40\1\41\1\42\76\0\1\2\120\0"+
    "\1\43\44\0\7\5\1\44\64\5\12\0\1\45\102\0"+
    "\1\46\1\16\1\0\1\20\73\0\1\47\65\0\1\50"+
    "\4\0\1\51\72\0\1\47\1\0\1\20\76\0\1\52"+
    "\73\0\1\53\73\0\1\54\54\0\1\55\1\56\1\57"+
    "\11\0\1\25\4\0\14\25\2\0\22\25\13\0\1\55"+
    "\1\56\1\57\11\0\1\25\4\0\14\25\2\0\5\25"+
    "\1\60\14\25\13\0\1\55\1\56\1\57\11\0\1\25"+
    "\4\0\14\25\2\0\17\25\1\61\2\25\13\0\1\55"+
    "\1\56\1\57\11\0\1\25\4\0\14\25\2\0\11\25"+
    "\1\62\10\25\13\0\1\55\1\56\1\57\11\0\1\25"+
    "\4\0\14\25\2\0\13\25\1\63\6\25\13\0\1\55"+
    "\1\56\1\57\11\0\1\25\4\0\14\25\2\0\11\25"+
    "\1\64\10\25\13\0\1\55\1\56\1\57\11\0\1\25"+
    "\4\0\14\25\2\0\13\25\1\65\6\25\13\0\1\55"+
    "\1\56\1\57\11\0\1\25\4\0\14\25\2\0\6\25"+
    "\1\66\3\25\1\67\7\25\13\0\1\55\1\56\1\57"+
    "\11\0\1\25\4\0\14\25\2\0\15\25\1\70\2\25"+
    "\1\71\1\25\13\0\1\55\1\56\1\57\11\0\1\25"+
    "\4\0\14\25\2\0\13\25\1\72\6\25\75\0\1\73"+
    "\22\0\1\74\52\0\16\75\1\76\55\75\2\51\1\2"+
    "\2\51\1\3\66\51\10\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\3\25\1\77\16\25\13\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\15\25\1\100\4\25\13\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\1\25\1\101\20\25\13\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\20\25\1\102\1\25\13\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\16\25\1\103\3\25\13\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\15\25\1\104\4\25\13\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\17\25\1\105\2\25\13\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\10\25\1\106\11\25\13\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\2\25\1\107\17\25\13\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\10\25\1\110\11\25\24\0\1\111\52\0\16\75\1\112"+
    "\73\75\1\112\4\75\1\113\50\75\10\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\11\25\1\114"+
    "\10\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\10\25\1\115\11\25\13\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\16\25\1\116"+
    "\3\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\2\25\1\117\17\25\13\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\5\25\1\120"+
    "\14\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\12\25\1\121\7\25\13\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\11\25\1\122"+
    "\10\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\4\25\1\123\15\25\24\0\1\124\52\0"+
    "\16\75\1\112\4\75\1\2\50\75\10\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\1\25\1\125"+
    "\20\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\12\25\1\126\7\25\13\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\16\25\1\127"+
    "\3\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\11\25\1\130\10\25\13\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\17\25\1\131"+
    "\2\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\10\25\1\132\11\25\24\0\1\133\62\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\15\25\1\134\4\25\13\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\7\25\1\135\12\25\13\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\5\25\1\136\14\25\13\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\11\25\1\137\10\25\13\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\3\25\1\140\16\25\24\0\1\141\62\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\1\25\1\142"+
    "\20\25\13\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\12\25\1\143\7\25\24\0\1\144\62\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\14\25\2\0"+
    "\3\25\1\145\16\25\24\0\1\146\62\0\1\55\1\56"+
    "\1\57\11\0\1\25\4\0\14\25\2\0\10\25\1\147"+
    "\11\25\24\0\1\150\62\0\1\55\1\56\1\57\11\0"+
    "\1\25\4\0\14\25\2\0\13\25\1\151\6\25\24\0"+
    "\1\152\62\0\1\55\1\56\1\57\11\0\1\25\4\0"+
    "\14\25\2\0\12\25\1\153\7\25\24\0\1\154\62\0"+
    "\1\55\1\56\1\57\11\0\1\25\4\0\13\25\1\155"+
    "\2\0\22\25\24\0\1\156\62\0\1\55\1\56\1\57"+
    "\11\0\1\25\4\0\14\25\2\0\1\25\1\157\20\25"+
    "\24\0\1\160\62\0\1\55\1\56\1\57\11\0\1\25"+
    "\4\0\14\25\2\0\15\25\1\161\4\25\24\0\1\162"+
    "\62\0\1\55\1\56\1\57\11\0\1\25\4\0\14\25"+
    "\2\0\10\25\1\163\11\25\24\0\1\164\62\0\1\55"+
    "\1\56\1\57\11\0\1\25\4\0\14\25\2\0\1\25"+
    "\1\165\20\25\24\0\1\166\62\0\1\55\1\56\1\57"+
    "\11\0\1\25\4\0\14\25\2\0\2\25\1\167\17\25"+
    "\24\0\1\170\62\0\1\55\1\56\1\57\11\0\1\25"+
    "\4\0\14\25\2\0\11\25\1\171\10\25\24\0\1\172"+
    "\62\0\1\55\1\56\1\57\11\0\1\25\4\0\14\25"+
    "\2\0\5\25\1\173\14\25\24\0\1\174\62\0\1\55"+
    "\1\56\1\57\11\0\1\25\2\0\1\175\1\0\14\25"+
    "\2\0\22\25\24\0\1\176\115\0\1\177\51\0\1\200"+
    "\107\0\1\201\57\0\1\202\112\0\1\203\54\0\1\204"+
    "\111\0\1\205\55\0\1\206\121\0\1\207\45\0\1\210"+
    "\105\0\1\211\61\0\1\212\103\0\1\213\63\0\1\214"+
    "\115\0\1\215\51\0\1\216\111\0\1\217\55\0\1\220"+
    "\107\0\1\221\57\0\1\222\125\0\1\223\41\0\1\224"+
    "\126\0\1\225\40\0\1\226\133\0\1\227\33\0\1\230"+
    "\140\0\1\231\26\0\1\232\131\0\1\233\35\0\1\234"+
    "\127\0\1\235\37\0\1\236\131\0\1\237\35\0\1\240"+
    "\124\0\1\241\42\0\1\242\122\0\1\243\44\0\1\244"+
    "\125\0\1\245\41\0\1\246\134\0\1\247\32\0\1\250"+
    "\136\0\1\251\30\0\1\252\65\0\1\253\101\0\1\254"+
    "\101\0\1\255\65\0\1\256\65\0\1\257\101\0\1\260"+
    "\116\0\1\261\50\0\1\262\103\0\1\263\63\0\1\264"+
    "\110\0\1\265\100\0\1\266\67\0\1\267\71\0\1\270"+
    "\77\0\1\271\72\0\1\272\46\0\1\273\117\0\1\274"+
    "\61\0\1\275\101\0\1\276\53\0\1\277\114\0\1\300"+
    "\37\0\2\301\4\0\66\301\33\0\1\302\71\0\1\303"+
    "\105\0\1\304\67\0\1\305\101\0\1\306\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\0\1\11\1\0\5\11\1\1"+
    "\1\0\2\1\1\11\6\1\1\11\7\1\1\11\1\0"+
    "\4\11\1\0\1\1\1\0\1\1\6\11\13\1\1\11"+
    "\3\0\12\1\2\0\11\1\1\0\6\1\1\0\5\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\105\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
            // fall through
          case 44: break;
          case 2:
            { return token(yytext(), "-43", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 3:
            { return token(yytext(), "-23", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 4:
            { return token(yytext(), "-73", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 5:
            { return token(yytext(), "-74", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 6:
            { return token(yytext(), "-21", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 7:
            { return token(yytext(), "-24", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 8:
            { return token(yytext(), "-76", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 9:
            { return token(yytext(), "-25", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 10:
            { return token(yytext(), "-22", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 11:
            { return token(yytext(), "-61", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 12:
            { return token(yytext(), "-75", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 13:
            { return token(yytext(), "-31", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 14:
            { return token(yytext(), "-26", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 15:
            { return token(yytext(), "-33", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 16:
            { return token(yytext(), "-82", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 17:
            { return token(yytext(), "-72", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 18:
            { return token(yytext(), "-77", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 19:
            { return token(yytext(), "-78", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 20:
            { return token(yytext(), "-36", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 21:
            { return token(yytext(), "-63", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 22:
            { return token(yytext(), "-41", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 23:
            { return token(yytext(), "-62", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 24:
            { return token(yytext(), "-32", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 25:
            { return token(yytext(), "-35", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 26:
            { return token(yytext(), "-34", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 27:
            { return token(yytext(), "-79", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 28:
            { return token(yytext(), "-80", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 29:
            { return token(yytext(), "-81", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 30:
            { return token(yytext(), "-1", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 31:
            { return token(yytext(), "-42", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          case 32:
            { return token(yytext(), "-3", yyline, yycolumn);
            }
            // fall through
          case 75: break;
          case 33:
            { return token(yytext(),"-64",yyline,yycolumn);
            }
            // fall through
          case 76: break;
          case 34:
            { return token(yytext(), "-2", yyline, yycolumn);
            }
            // fall through
          case 77: break;
          case 35:
            { return token(yytext(),"-69",yyline,yycolumn);
            }
            // fall through
          case 78: break;
          case 36:
            { return token(yytext(),"-68",yyline,yycolumn);
            }
            // fall through
          case 79: break;
          case 37:
            { return token(yytext(), "-4", yyline, yycolumn);
            }
            // fall through
          case 80: break;
          case 38:
            { return token(yytext(),"-66",yyline,yycolumn);
            }
            // fall through
          case 81: break;
          case 39:
            { return token(yytext(),"-65",yyline,yycolumn);
            }
            // fall through
          case 82: break;
          case 40:
            { return token(yytext(),"-67",yyline,yycolumn);
            }
            // fall through
          case 83: break;
          case 41:
            { return token(yytext(), "-5", yyline, yycolumn);
            }
            // fall through
          case 84: break;
          case 42:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 85: break;
          case 43:
            { return token(yytext(), "-71", yyline, yycolumn);
            }
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
